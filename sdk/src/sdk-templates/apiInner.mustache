
{{#operations}}
{{#operation}}
{{#allParams.0}}
/**
 * Request parameters for {{nickname}} operation in {{classname}}.
 * @export
 * @interface {{classname}}{{operationIdCamelCase}}Request
 */
export interface {{classname}}{{operationIdCamelCase}}Request {
    {{#allParams}}
    /**
     * {{description}}
     * @type {{=<% %>=}}{<%&dataType%>}<%={{ }}=%>
     * @memberof {{classname}}{{operationIdCamelCase}}
     */
    readonly {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}}
    {{^-last}}

    {{/-last}}
    {{/allParams}}
}

{{/allParams.0}}

{{#queryParams.0}}
/**
 * Query parameters for {{nickname}} operation in {{classname}}.
 * @export
 * @interface {{classname}}{{operationIdCamelCase}}QueryParams
 */
export interface {{classname}}{{operationIdCamelCase}}QueryParams {
    {{#queryParams}}
    /**
     * {{description}}
     * @type {{=<% %>=}}{<%&dataType%>}<%={{ }}=%>
     * @memberof {{classname}}{{operationIdCamelCase}}
     */
    {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}}
    {{^-last}}

    {{/-last}}
    {{/queryParams}}
}

{{/queryParams.0}}

{{#headerParams.0}}
/**
 * Query parameters for {{nickname}} operation in {{classname}}.
 * @export
 * @interface {{classname}}{{operationIdCamelCase}}HeaderParams
 */
export interface {{classname}}{{operationIdCamelCase}}HeaderParams {
    {{#queryParams}}
    /**
     * {{description}}
     * @type {{=<% %>=}}{<%&dataType%>}<%={{ }}=%>
     * @memberof {{classname}}{{operationIdCamelCase}}
     */
    {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}}
    {{^-last}}

    {{/-last}}
    {{/queryParams}}
}

{{/headerParams.0}}
{{/operation}}

/**
 * {{classname}} - object-oriented interface{{#description}}
 * {{{.}}}{{/description}}
 * @export
 * @class {{classname}}
 * @extends {BaseAPI}
 */
export class {{classname}} extends BaseAPI {

    constructor(protected configuration: Configuration, protected axios: AxiosInstance = globalAxios) {
        super(configuration, configuration.basePath, axios);
    }

    {{#operation}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}

     {{#pathParams}}
     * @param {{=<% %>=}}{<%#isEnum%><%&datatypeWithEnum%><%/isEnum%><%^isEnum%><%&dataType%><%#isNullable%> | null<%/isNullable%><%/isEnum%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
     {{/pathParams}}
     {{#queryParams.0}}
     * @param {{=<% %>=}}{<%& classname %><%& operationIdCamelCase %>QueryParams}<%={{ }}=%> queryParams Query parameters.
     {{/queryParams.0}}
     * @param {AxiosRequestConfig} [options] Override http request option.{{#isDeprecated}}
     * @deprecated{{/isDeprecated}}
     * @throws {RequiredError}
     * @memberof {{classname}}
     */
    
    public async {{nickname}}(
        {{#pathParams}}{{paramName}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}},
        {{/pathParams}}{{#hasQueryParams}}queryParams: {{classname}}{{operationIdCamelCase}}QueryParams{{^hasRequiredParams}} = {}{{/hasRequiredParams}},
        {{/hasQueryParams}}{{#formParams}}{{paramName}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}},
        {{/formParams}}{{#bodyParam}}{{paramName}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}},
        {{/bodyParam}}{{#hasHeaderParams}}headerParams: {{classname}}{{operationIdCamelCase}}HeaderParams{{^hasRequiredParams}} = {}{{/hasRequiredParams}},
        {{/hasHeaderParams}}options: AxiosRequestConfig = {}
    ) {

{{#allParams}}
{{#required}}
        // verify required parameter '{{paramName}}' is not null or undefined
        {{#pathParams}}{{#required}}assertParamExists('{{nickname}}', '{{paramName}}', {{paramName}})
        {{/required}}{{/pathParams}}{{#queryParams}}{{#required}}assertParamExists('{{nickname}}', '{{paramName}}', queryParams.{{paramName}})
        {{/required}}{{/queryParams}}{{#formParams}}{{#required}}assertParamExists('{{nickname}}', '{{paramName}}', {{paramName}})
        {{/required}}{{/formParams}}{{#bodyParam}}{{#required}}assertParamExists('{{nickname}}', '{{paramName}}', {{paramName}})
        {{/required}}{{/bodyParam}}
{{/required}}
{{/allParams}}
        const localVarPath = `{{{path}}}`{{#pathParams}}
            .replace(`{${"{{baseName}}"}}`, encodeURIComponent(String({{paramName}}))){{/pathParams}};
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const requestUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
        let baseOptions;
        if (this.configuration) {
            baseOptions = this.configuration.baseOptions;
        }

        const axiosRequestConfig: AxiosRequestConfig = { method: '{{httpMethod}}', ...baseOptions, ...options};
        const requestHeaderParameter = {} as any;
        const requestQueryParameter = {} as any;{{#vendorExtensions}}{{#hasFormParams}}
        const requestFormParams = new {{^multipartFormData}}URLSearchParams(){{/multipartFormData}}{{#multipartFormData}}((this.configuration && this.configuration.formDataCtor) || FormData)(){{/multipartFormData}};{{/hasFormParams}}{{/vendorExtensions}}

{{#authMethods}}
        // authentication {{name}} required
        {{#isApiKey}}
        {{#isKeyInHeader}}
        await setApiKeyToObject(requestHeaderParameter, "{{keyParamName}}", this.configuration)
        {{/isKeyInHeader}}
        {{#isKeyInQuery}}
        await setApiKeyToObject(requestQueryParameter, "{{keyParamName}}", this.configuration)
        {{/isKeyInQuery}}
        {{/isApiKey}}
        {{#isBasicBasic}}
        // http basic authentication required
        setBasicAuthToObject(axiosRequestConfig, this.configuration)
        {{/isBasicBasic}}
        {{#isBasicBearer}}
        // http bearer authentication required
        await setBearerAuthToObject(requestHeaderParameter, this.configuration)
        {{/isBasicBearer}}
        {{#isOAuth}}
        // oauth required
        await setOAuthToObject(requestHeaderParameter, "{{name}}", [{{#scopes}}"{{{scope}}}"{{^-last}}, {{/-last}}{{/scopes}}], this.configuration)
        {{/isOAuth}}

{{/authMethods}}
{{#queryParams}}
        {{#isArray}}
        if (queryParams.{{paramName}}) {
        {{#isCollectionFormatMulti}}
            {{#uniqueItems}}
            requestQueryParameter['{{baseName}}'] = Array.from(queryParams.{{paramName}});
            {{/uniqueItems}}
            {{^uniqueItems}}
            requestQueryParameter['{{baseName}}'] = queryParams.{{paramName}};
            {{/uniqueItems}}
        {{/isCollectionFormatMulti}}
        {{^isCollectionFormatMulti}}
            {{#uniqueItems}}
            requestQueryParameter['{{baseName}}'] = Array.from(queryParams.{{paramName}}).join(COLLECTION_FORMATS.{{collectionFormat}});
            {{/uniqueItems}}
            {{^uniqueItems}}
            requestQueryParameter['{{baseName}}'] = queryParams.{{paramName}}.join(COLLECTION_FORMATS.{{collectionFormat}});
            {{/uniqueItems}}
        {{/isCollectionFormatMulti}}
        }
        {{/isArray}}
        {{^isArray}}
        if (queryParams.{{paramName}} !== undefined) {
            {{#isDateTime}}
            requestQueryParameter['{{baseName}}'] = (queryParams.{{paramName}} as any instanceof Date) ?
                (queryParams.{{paramName}} as any).toISOString() :
                queryParams.{{paramName}};
            {{/isDateTime}}
            {{^isDateTime}}
            {{#isDate}}
            requestQueryParameter['{{baseName}}'] = (queryParams.{{paramName}} as any instanceof Date) ?
                (queryParams.{{paramName}} as any).toISOString().substring(0,10) :
                queryParams.{{paramName}};
            {{/isDate}}
            {{^isDate}}
            requestQueryParameter['{{baseName}}'] = queryParams.{{paramName}};
            {{/isDate}}
            {{/isDateTime}}
        }
        {{/isArray}}

{{/queryParams}}
{{#headerParams}}
        {{#isArray}}
        if (headerParams.{{paramName}}) {
            {{#uniqueItems}}
            let mapped = Array.from(headerParams.{{paramName}}).map(value => (<any>"{{{dataType}}}" !== "Set<string>") ? JSON.stringify(value) : (value || ""));
            {{/uniqueItems}}
            {{^uniqueItems}}
            let mapped = headerParams.{{paramName}}.map(value => (<any>"{{{dataType}}}" !== "Array<string>") ? JSON.stringify(value) : (value || ""));
            {{/uniqueItems}}
            requestHeaderParameter['{{baseName}}'] = mapped.join(COLLECTION_FORMATS["{{collectionFormat}}"]);
        }
        {{/isArray}}
        {{^isArray}}
        {{! `val == null` covers for both `null` and `undefined`}}
        if (headerParams.{{paramName}} != null) {
            {{#isString}}
            requestHeaderParameter['{{baseName}}'] = String(headerParams.{{paramName}});
            {{/isString}}
            {{^isString}}
            {{! isString is falsy also for $ref that defines a string or enum type}}
            requestHeaderParameter['{{baseName}}'] = typeof headerParams.{{paramName}} === 'string'
                ? headerParams.{{paramName}}
                : JSON.stringify(headerParams.{{paramName}});
            {{/isString}}
        }
        {{/isArray}}

{{/headerParams}}
{{#vendorExtensions}}
{{#formParams}}
        {{#isArray}}
        if ({{paramName}}) {
        {{#isCollectionFormatMulti}}
            {{paramName}}.forEach((element) => {
                requestFormParams.{{#multipartFormData}}append{{/multipartFormData}}{{^multipartFormData}}set{{/multipartFormData}}('{{baseName}}', element as any);
            })
        {{/isCollectionFormatMulti}}
        {{^isCollectionFormatMulti}}
            requestFormParams.{{#multipartFormData}}append{{/multipartFormData}}{{^multipartFormData}}set{{/multipartFormData}}('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS.{{collectionFormat}}));
        {{/isCollectionFormatMulti}}
        }{{/isArray}}
        {{^isArray}}
        if ({{paramName}} !== undefined) { {{^multipartFormData}}
            requestFormParams.set('{{baseName}}', {{paramName}} as any);{{/multipartFormData}}{{#multipartFormData}}{{#isPrimitiveType}}
            requestFormParams.append('{{baseName}}', {{paramName}} as any);{{/isPrimitiveType}}{{^isPrimitiveType}}{{#isEnumRef}}
            requestFormParams.append('{{baseName}}', {{paramName}} as any);{{/isEnumRef}}{{^isEnumRef}}
            requestFormParams.append('{{baseName}}', new Blob([JSON.stringify({{paramName}})], { type: "application/json", }));{{/isEnumRef}}{{/isPrimitiveType}}{{/multipartFormData}}
        }{{/isArray}}
{{/formParams}}{{/vendorExtensions}}
{{#vendorExtensions}}{{#hasFormParams}}{{^multipartFormData}}
        requestHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';{{/multipartFormData}}{{#multipartFormData}}
        requestHeaderParameter['Content-Type'] = 'multipart/form-data';{{/multipartFormData}}
{{/hasFormParams}}{{/vendorExtensions}}
{{#bodyParam}}
        {{^consumes}}
        requestHeaderParameter['Content-Type'] = 'application/json';
        {{/consumes}}
        {{#consumes.0}}
        requestHeaderParameter['Content-Type'] = '{{{mediaType}}}';
        {{/consumes.0}}

{{/bodyParam}}
        setSearchParams(requestUrlObj, requestQueryParameter);
        let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
        axiosRequestConfig.headers = {...requestHeaderParameter, ...headersFromBaseOptions,{{#hasFormParams}}{{#multipartFormData}} ...(requestFormParams as any).getHeaders?.(),{{/multipartFormData}}{{/hasFormParams}} ...options.headers};
{{#hasFormParams}}
        axiosRequestConfig.data = requestFormParams{{#vendorExtensions}}{{^multipartFormData}}.toString(){{/multipartFormData}}{{/vendorExtensions}};
{{/hasFormParams}}
{{#bodyParam}}
        axiosRequestConfig.data = serializeDataIfNeeded({{paramName}}, axiosRequestConfig, this.configuration)
{{/bodyParam}}

        axiosRequestConfig["url"] = (this.configuration.basePath || BASE_PATH) + toPathString(requestUrlObj);
        
        return this.axios.request<{{{returnType}}}{{^returnType}}void{{/returnType}}>(axiosRequestConfig);
    }
    {{^-last}}

    {{/-last}}
    {{/operation}}
}
{{/operations}}

{{#operations}}
{{#operation}}
{{#allParams}}
{{#isEnum}}
{{#stringEnums}}
/**
  * @export
  * @enum {string}
  */
export enum {{operationIdCamelCase}}{{enumName}} {
{{#allowableValues}}
    {{#enumVars}}
    {{{name}}} = {{{value}}}{{^-last}},{{/-last}}
    {{/enumVars}}
{{/allowableValues}}
}
{{/stringEnums}}
{{^stringEnums}}
/**
 * @export
 */
export const {{operationIdCamelCase}}{{enumName}} = {
{{#allowableValues}}
    {{#enumVars}}
    {{{name}}}: {{{value}}}{{^-last}},{{/-last}}
    {{/enumVars}}
{{/allowableValues}}
} as const;
export type {{operationIdCamelCase}}{{enumName}} = typeof {{operationIdCamelCase}}{{enumName}}[keyof typeof {{operationIdCamelCase}}{{enumName}}];
{{/stringEnums}}
{{/isEnum}}
{{/allParams}}
{{/operation}}
{{/operations}}